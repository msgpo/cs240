package shared.model;

import java.util.*;
import java.io.*;
import shared.communication.*;

/**
 * A user, which has some personal data and authentication
 * data, and the number of records indexed by that user.
  */

public class user implements Serializable{
	
	private String fName;
	private String lName;
	private String username;
	private String pw;
	private int rec;
	private int id;
	private int batchID;
	private boolean hasBatch = false;

	/**
	 * Construct a new user
	 * @param uname user's username
	*	@param firstName user's first name
	*	@param lastName user's last name
	*	@param password	user's password
	*	@param records	how many records have been indexed
	*	@param userID	user's ID; not important if not creating from DB
	*/
	public user(String uname, String firstName, String lastName,
			String password, int records, int userID){
		username = uname;
		fName = firstName;
		lName = lastName;
		pw = password;
		rec = records;
		id = userID;
	}
	
	/**
	 * get first name
	 * @return String first name
	 */
	public String getFName(){
		return fName;
	}
	
	/**
	 * get last name
	 * @return String last name
	 */
	public String getLName(){
		return lName;
	}
	
	/**
	 * get username
	 * @return String username
	 */
	public String getUsername(){
		return username;
	}
	
	/** 
	 * set ID generated by database after adding user
	 * @param i ID as int
	 */
	public void setID(int i){
		id = i;
	}
	
	/**
	 * get user's assigned ID
	 * @return int ID
	 */
	public int getID(){
		return id;
	}
	
	/**
	 * get pw :(
	 * @return String password
	 */
	public String getPW(){
		return pw;
	}

	/**
	 * update the count of records indexed by this user
	*	@param add how many new records have been done
	*/
	public void updateRecords(int add){
		rec += add;
	}
	
	/**
	 * reveal how many records this user has indexed
	 * @return the number of records already indexed
	 */
	public int getRecords(){
		return rec;
	}
	
	/**
	 * assign a batch to this user
	 * @param assign ID of batch to assign
	 */
	public void assignBatch(int assign){
		batchID = assign;
		hasBatch = true;
	}
	
	/**
	 * reveal whether a batch is assigned
	 * @return true if batch assigned, false otherwise
	 */
	public boolean hasBatch(){
		return hasBatch;
	}
	
	/**
	 * reveal which batch has been assigned
	 * @return int ID of assigned batch
	 */
	public int whichBatch(){
		return batchID;
	}	

	/**
	 * get a userToken, representing this user,
	 * which can be used for authentication during
	 * server operations
	*	@return a matching userToken object
	*/
	public userToken token(){
		return new shared.communication.userToken(username, pw);
	}
	
	/**
	 * equals method
	 * @param o any object
	 * @return true if equals, false otherwise
	 */
	@Override
	public boolean equals(Object o){
		if(this == o){
			return true;
		}
		if(!(o instanceof user)){
			return false;
		}
		user c = (user) o;
		
		boolean test =
			(	fName.equals(c.getFName()) &&
				lName.equals(c.getLName()) &&
				username.equals(c.getUsername()) &&
				(id == c.getID()) &&
				pw.equals(c.getPW()) &&
				(rec == c.getRecords()) &&
				(hasBatch == c.hasBatch())
			);

		return test;
	}
	
	@Override
	public String toString(){
		StringBuilder sb = new StringBuilder();
		sb.append(fName + " " + lName +"\n");
		sb.append(username + " " + pw + "\n");
		sb.append(rec + " " + hasBatch + "\n");
		sb.append(id + "\n");
		return sb.toString();
	}
}
