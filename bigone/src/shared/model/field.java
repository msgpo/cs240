package shared.model;

import java.util.*;
import java.io.*;
/**
 * a field, which is had by batches and projects,
 * lets you know what kind of information needs to 
 * be indexed by a user
 */

public class field implements Serializable{
	
	private String name;
	private int ID;
	private int n;
	private String h;
	private int x;
	private int w;
	private String vals;
	private int projID;

	/**
	 * Construct a new field
	*	@param title name of the field
	*	@param fID field ID: 0 if not in DB yet
	*	@param fNum field number
	*	@param width field width 
	*	@param x_coord x-coordinate
	*	@param known_vals URL of known values file
	*	@param help URL of help file
	*   @param projKey ID of the batch this belongs to
	*/
	public field(String title, int fID, int fNum, int width, 
			int x_coord, String known_vals,
			String help, int projKey){
		name = title;
		ID = fID;
		n = fNum;
		w = width;
		x = x_coord;
		vals = known_vals;
		h = help;
		projID = projKey;
	}

	/**
	 * reveal this field's title
	*	@return title
	*/
	public String getTitle(){
		return name;
	}
	
	/**
	 * reveal the field's globally-unique ID
	*	@return field ID
	*/
	public int getID(){
		return ID;
	}
	
	/**
	 * sets the ID after being generated by the DB
	 * @param i int ID
	 */
	public void setID(int i){
		ID = i;
	}
	
	/**
	 * reveal the field's number within a project
	*	@return number of field
	*/
	public int getNumber(){
		return n;
	}

	/**
	 * reveal the help file's URL.  this is where indexing 
	 * instructions live.
	*	@return the URL of the help file
	*/
	public String getHelp(){
		return h;
	}

	/**
	 * reveal the URL of the known values file.  this is used
	 * to provide suggestions to the indexer.
	*	@return the URL of the known values file
	*/
	public String getVals(){
		return vals;
	}

	/**
	 * reveal the x-coordinate of the field in a batch image
	*	@return the x-coordinate of the field
	*/
	public int getXCoord(){
		return x;
	}

	/**
	 * reveal the width of the field on the batch image
	*	@return field width
	*/
	public int getWidth(){
		return w;
	}
	
	/**
	 * reveal the proj this belongs to
	 * @return int ID of a batch
	 */
	public int getProject(){
		return projID;
	}
	
	/**
	 * test for equality
	 * @param o object to test
	 * @return true if the same, false otherwise
	 */
	@Override
	public boolean equals(Object o){
		if(this == o){
			return true;
		}
		if(!(o instanceof field)){
			return false;
		}
		
		field c = (field) o;
		
		return
		(	name.equals(c.getTitle()) 	&&
			(ID == c.getID())			&&
			(n == c.getNumber())		&&
			h.equals(c.getHelp())		&&
			vals.equals(c.getVals())	&&
			(x == c.getXCoord())		&&
			(w == c.getWidth())			&&
			(projID == c.getProject())	
		);
	}
}
